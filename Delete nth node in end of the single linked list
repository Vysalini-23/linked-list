
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SLL:
    def __init__(self):
        self.head = None

    def delete_nth_node_end(self, n):
        first = self.head
        second = self.head

        # Move `first` pointer n steps ahead
        for _ in range(n):
            if first:
                first = first.next
            else:
                # If n is greater than the length of the list
                return self.head

        # If `first` is None, it means we need to delete the head node
        if not first:
            self.head = self.head.next
            return self.head

        # Move both pointers until `first` reaches the end
        while first.next:
            first = first.next
            second = second.next

        # Delete the nth node from the end
        second.next = second.next.next
        return self.head

    def printList(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

# Test the linked list
l = SLL()
n = Node(10)
l.head = n
n1 = Node(20)
n.next = n1
n2 = Node(30)
n1.next = n2
n3 = Node(40)
n2.next = n3
n4 = Node(50)
n3.next = n4

print("Original linked list:")
l.printList()

l.delete_nth_node_end(2)

print("After deleting the 2nd node from the end:")
l.printList()
